// --------------------------------------------------------------------------------------------------------------------
// <copyright file="LogglyTag.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Logging source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Logging.Recipes
{
    using System;
    using System.Text.RegularExpressions;

    using OBeautifulCode.String.Recipes;
    using OBeautifulCode.Validation.Recipes;

    using static System.FormattableString;

    /// <summary>
    /// Represents a tag on log message that is compliant with Loggly's tagging requirements.
    /// </summary>
    /// <remarks>
    /// Here is Loggly's specification for tags: <a href="https://www.loggly.com/docs/tags/" />.
    /// </remarks>
#if !OBeautifulCodeLoggingRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Logging", "See package version number")]
    internal
#else
    public
#endif
        class LogglyTag
    {
        private const string TagRequirements = "The valid character set for a tag value includes all alpha-numeric characters, dash, period, and underscore. There is an exception to this, where the first character of a tag may only be alpha-numeric. The maximum length of an individual tag is 64 characters.";

        private static readonly Regex InvalidCharacterRegex = new Regex("[^a-zA-Z0-9._-]", RegexOptions.Compiled);

        /// <summary>
        /// Initializes a new instance of the <see cref="LogglyTag"/> class.
        /// </summary>
        /// <param name="tag">The tag.</param>
        public LogglyTag(
            string tag)
        {
            new { tag }.Must().NotBeNullNorWhiteSpace();

            var tagLength = tag.Length;
            if (tagLength > 64)
            {
                throw new ArgumentException(Invariant($"The specified tag is too long.  It has {tagLength} characters.  {TagRequirements}  Specified tag: {tag}"));
            }

            if (!tag[0].ToString().IsAlphanumeric())
            {
                throw new ArgumentException(Invariant($"The first character of the specified tag is not alpha-numeric.  {TagRequirements}  Specified tag: {tag}"));
            }

            if (InvalidCharacterRegex.IsMatch(tag))
            {
                throw new ArgumentException(Invariant($"The tag contains an invalid character.  {TagRequirements}  Specified tag: {tag}"));
            }

            this.Tag = tag;
        }

        /// <summary>
        /// Gets the tag value.
        /// </summary>
        public string Tag { get; }
    }
}
